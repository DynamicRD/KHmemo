서버가 명령을 기다리고 있다(반복문)	---	accept
누군가 들어오면 accpet를 통해서 클라이언트 소켓을 만듦
소켓에서 CS(AS) IS,OS을 만듦
이 3개를 기억할만한 서버스레드 클래스를 만듦
서버스레드 안에는(전화기 클라이언트소켓)(송신기 아웃풋스트림)(수신기 인풋스트림)(누구전화 스트링)
클라이언트가 접속할때부터 만듦
카운트로 세다가 스타트함
모든 서버들은 ArrayList로 관리

GUI방식 클래스 
HTML<input type="text">

형상관리 
1.push 하기전에 pull하고(충돌을 방지하기위해서)
2.reset 하기전에 revert하라

깃은 타임머신이다
프로그램을 원하는 시점으로 가서 재조정할 수 있다.
프로그램이 안전하다
작성한 코드를 모든 사람이 공유할 수 있다.

깃: 버전관리프로그램
깃을 관리하려면 리눅스 명령어를 알아야함
그래서 소스트리를 이용함

깃허브: 원격저장소
깃은 저장 협력이 불가함

깃을 깃허브에 올리는걸 push
깃허브에서 받는걸 pull
리모트 레파리토리: 깃허브에서 만든거 저장하는공간
로컬 레파리토리:	깃에서 컴터에 저장하는공간

깃의 원칙
자신의 프로그램 외에는 수정하면 안됨
고쳐달라고 요청해야함

D:test만들고 우클릭 git bash
git config --global user.name "Hongildong"		깃허브 아이디 등록

git config --global user.email abcde@gmail.com	깃허브 이메일 등록

git config user.name	깃허브 아이디 확인

git config user.email	깃허브 이메일 확인

git init			로컬레파지토리를 만든다

소스트리->건너뛰기->mec체크해제->
create->경로지정, 삭제도 가능
로컬레파지토리 기능: 버전관리

원격 레파지토리는 로컬이랑  이름 같게하는게 좋다
public/private
readme:	프로그램 실행시 주의사항 적기
.gitignore:	남이 봐서 안되는 정보들
버전관리의 큰 그림

작업디렉터리: 		쓰는 폴더
저장소(로컬 레포지토리):	작업디렉토리 안의 .git,시간별 스테이지 내용을 pull push로 넣음
스테이지:			버전관리 하고싶은걸들 올려놓음,타임머신 후보만 기록
스테이지의 물건을 커밋해서 기록물로 남기고 저장소에 넣는다

작업디렉토리에서 하는일들
1.패키지 만들고 삭제	
2.클래스 만들고 삭제 수정(수정 추가 삭제) create append delete

작업디렉토리는 위의 일들을 감시하고있음

add하면 일곱가지작업디렉토리 만든거 스테이지에 들어가고 commit하면 저장소에 들어감

비주얼 스튜디오 코드
추가하면 ?파일 생김

왜 커밋하는지 이유를 적어주면좋음
tracked, untracked 물음표 ,관리대상인지 아닌지여부. 버전관리 됐는지 안됐는지

파일명 gitignore 지으면 싹다 내용물 무시함
.gitignore 만들고
d.txt
login/*

gitignore는 7가지 상태변화를 감지해서 스테이지에 올리지 않게 한다

1.local repository : my-test로 만들어라
2.폴더: login,logout,car,register 생성
3.각각 폴더에: 파일을 5개씩 만든다(커밋을 5번씩 진행)
4 .gitingnore 만들고 (cart,register)등록한다
5.이러한내용을 보여주면된다