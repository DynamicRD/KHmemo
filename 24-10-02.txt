제네릭과 컬렉션

제네릭 프로그래밍은 다양한 종류의 데이터를 처리하는 클래스와 메소드를 작성하는 기법이다

컬렉션 프레임워크
배열은 확장성이 구림, 동기화처리가안됨, 컬렉션프레임워크는 다양한 지원기능이있음
배열의 단점들을 개선하려고 만듦

class Box<T>

제네릭 = <T>, 단 기본타입을 적을 수 없고(랩퍼 해야함) 클래스 타입만 적어야함

컬렉션은 자바에서 자료구조를 구현한 클래스,부모 인터페이스로 객체의 모임을 나타냄
자료구조로는 리스트,스택,큐,집합(set),해쉬테이블(Map) 등이 있다

Vector->ArrayList
추가 add, remove,get,contains(있는지 없는지),clear,toArray(배열로 변환),isEmpty
	Arrays.asList(배열을 ArrayList로 변환)

[ ]를 쓸수없다(list가 대괄호다!)

literator(반복자)를 사용할 수 있다.
->hasNext()와 next()가 있다
hasNext()는 

ArrayList Vector의 차이: Vector는 동기화처리가 안되어있다.
동기화의 문제점(교착상태):	에어컨을 25도로 설정하고 25도를 받아야함, 근데 딴사람이 13도를 넣었음 그럼 13도 받음
그걸 방지하려면 동기화 처리를 해야함

Vector: 공유지원을 2개이상의 스레드가 사용하려는거 방지(대신 느리다!)
25도 저장하고 25도값을 받고 반환하는가(공유방 메모장)

add(index,3):	밀면서 추가함
컬렉션프레임워크에서 제네릭이 없으면 오브젝트임

hashCode,compareTo, 유일한 값을 갖는 멤버변수: primary key, unique key(null도 들어감)
클래스내에 반드시 있어야함

동기화: 한 자원을 두개의 스레드가 데드락(교착상태)이 발생하지 않게 만드는 행위

CURD 	:Create(추가add) Update(수정set) Read(get) Delete(remove) (contains) (sort)

LinkedList: 삽입 삭제가 빈번하게 일어날때 추천

Set 장점: 원소의 중복을 허용하지 않는다. 
집합은 순서(인덱스)가 없다
iterator(이 주머니(셋)에 라이터(객체)가 있어요) 로 가져와야함
hasNext()있으면 줘라 = 트루를 반환
next() : 무작위로 하나 뽑는다
같은객체 유무는 hashCode와 equals를 가지고 객체를 비교를 한다.

DB도 프라이머리키 해쉬코드 막아버림
	add contains 
HashSet:	구현클래스
Tree만 들어가면 검색과 정렬 Linked
All들어가면 부분집합
Set에는 부분,합,교,차집합등의 기능이 있다.

씨리얼라이즈:	
	PhoneInfo phoneNumber = null;
		Iterator<PhoneInfo> it  = list.iterator();
		
		while(it.hasNext())
		{
			PhoneInfo tPhone = it.next();
			if(tPhone.getPhoneNumber().equals(phoneNumber)) {
				phoneNumber = tPhone;
				break;
			}
		}
set은 향상된 for문 사용 가능, 근데 사이즈에 따라 오류가능성있어서 비추천

print

Iterator<Phone> it = list.iterator();
for(;it.hasNext();){
Phone phone = it.next();
sysout(phone);
}

Map은 원하는 데이터를 빠륵 찾을수 있는 구조,list를 가시화시킴
key와 value값이 있음
key는 절대 중복이 일어나면 안됨
value는 중복이 일어나도됨
iterator로 가져와야함
add 못쓰고 put(key,value)이렇게 넣어야함
map.keySet() 키값만 가져옴

set.iterator 찍고 

큐:	FIFO
스택:     	FILO

	Pattern pattern = Pattern.compile("[1-7]");
            choice =  sc.nextLine();
            Matcher match = pattern.matcher(choice); 
            boolean bool = match.matches();
            if(bool == false) {
                System.out.println("\n1에서 7사이의 정수중에 골라주세요");
                continue;
            }
            userInput = Integer.parseInt(choice);