스레드 종료:	boolean stopFlag을 사용하거나
		thread.interrupt( ); 사용
		while !stop inturrpt등

interrupt는 대기상태에서만 걸 수 있다.
		Runnable이나 Run (X)

프로토콜: 	상호간의 약속

daemon 스레드:	주 스레드의 작업을 돕는 보조적인 역할 스레드
		메인스레드가 죽으면 그대로 종료된다.

일반적인 만든 작업스레드는 독립스레드이다
메인스레드가 끝나도 작업스레드가 종료되진 않음

데몬스레드 만들기: 	thread.setDaemon(true);
//------------------------------------------------------
네트워크 프로그래밍

소켓은 전화기같다
반복문,컬렉션프레임워크,TCI 7계층

물리 데이터 네트워크 전송 세션 표현 응용

램카드엔 맥 주소가 들어있다.

서버:	서비스를 하는 주체자,요청을 하면 무언가를 제공해줌

포트번호는 서버한테 줌

통신의 조건 
1.MAC주소(물리적 주소, 램카드안에있음)
2.진짜 ip주소(라우터: 주소로 빨리가능 길을 알려줘)->32비트
3.포트번호

통신을 하려면 상대방의 포트번호를 알아야한다.
ftp서버: 		21번
telnet서버 : 	23번
SMTP서버:	25번
HTTP서버:	80번
Https서버:	443번
DNS서버:		53번
SSH서버:		22번

사실 https://www.naver.com:80 	이렇게 적어야한다

IP주소
IPV4: 4Octets 32비트사용
IPV6: 16Octets 128비트

IP보는 방법
IP는 A,B,C,D,E가 있고, A,B,C만 쓰인다			서브넷마스크 	호스트당 	
Class A:	총 128개	0XXXXXXX 0~127			255.0.0.0		2^24-2	2^7
	양보 10(가상주소),127번(로컬주소)
Class B:	총 64개	10XXXXXX 128~191		255.255.0.0	2^16-2	2^14
Class C:  	총 32개	110XXXXX 192~223		255.255.255.0	2^8-2	2^21
	양보 192(가상ip 수시로 바뀜, 스위치 허브)
Class D(멀디캐스트)		  224~239=2
Class E(연구용)		  240~255

A,B,C앞으로 갈수록 대규모 기업한테 준다
서브넷마스크: (네트워크와 호스트 부분을 구분)
게이트워이: 관문 이 클래스의 대표적인 주소

DNS(Domain Name System):		숫자 대신 기호를 사용하는 주소
DNS서버 = 한국통신이 DNS주소를 받고 ip주소를 반환해줌
통신사가 DNS서버주고 대신 찍어줌

URL(Uniform Resource Locator):	인터넷 상의 파일이나 데이터베이스같은 자원에 대해 줏고를 지정하는 방법

https:/		/www.naver.com/	 indec.html	:80
프로토콜이름	 호스트이름	 파일이름 	포트번호

OSI 7계층 모델(Open Systems Interconnection Model) 물데네 전세표 응
응용계층(application)	사용자와 네트워크 간의 상호작용을 지원하며, 애플리케이션 프로토콜을 통해 서비스 제공을 담당
표현계층(presentation)	데이터의 형식 변환을 담당하며, 데이터의 표현 형식(인코딩, 압축, 암호화 등)을 조정
세션계층(session)		여기부터 데이터로 인식,통신 세션의 설정, 유지 및 종료를 관리합니다. 클라이언트와 서버 간의 상호작용을 지원합니다.
-------------------------------------------------------------------------------
전송계층(Trasport)		종단 간의 데이터 전송을 관리하고, 오류 검출 및 복구, 흐름 제어 기능을 제공
-------------------------------------------------------------------------------
네트워크계층(Network	데이터 패킷을 전달하고 경로를 결정하여 서로 다른 네트워크 간의 통신을 담당
-------------------------------------------------------------------------------
데이터계층(DataLink)	물리적 연결을 통해 데이터 전송을 신뢰성 있게 수행하며, 오류 검출 및 수정 기능을 제공
물리계층(physical layer) 	전기적, 기계적, 절차적 요소를 통해 실제 데이터 전송을 담당합니다. (예: 케이블, 전압 등)

TCPI계층은
데이터->네트워크->전송->응용계층
UDP(
통신이 안전하다싶으면 그냥 보냄(빠르다)

응용계층: 	대화내용 전문과같은 문자 덩어리
표현계층: 	대화내용을 압축하고 암호화함
세션계층: 	이제부터 데이터를 메세지로 인식
전송계층: 	포장한 메시지에 상대방과 내 포트번호를 붙임(전배전방식) ->이걸 세그먼트라 부름,신뢰성 최우선
		TCPI,UDP,포트번호, 데이터간 신뢰를 얻는다
네트워크계층:	세그먼트에다가 나와 상대방 ip주소를 추가시킨다->패킷
데이터링크계층:	패킷에다 나와 상대방 MAC주소를 붙임->프레임,보내는 속도를 조정
물리계층:		프레임을 전기신호나 광신호로 저장.

상대방이 받으면 역순으로 진행

inpustream,outputstrea,read,write
컬렉션프레임워크

html은 자바의 gui타입 클래스이다

<h1 멤버변수들> (화면에들어가는내용 컨텐츠) <'h1>

대화를 나누려면 디바이스가 필요함:	소켓(진입점)

디바이스면 input outputstream가능

서버가 내가 접속하는순간 쓰고 읽는다

프로토콜
while (true) {
				String msg = in.readLine();
				if (msg.equalsIgnoreCase("quit")) {
					System.out.println("클라이언트에서 연결을 종료하였음");
					break;
				}
				System.out.println("클라이언트가 보낸 문자열: " + msg);
				System.out.print("클라이언트로 보낼 문자열을 입력하고 엔터키를 치세요: ");
				String omsg = sc.nextLine();
				out.write(omsg + "\n");
				out.flush();
			}
			out.close();
			clientSocket.close();
			serverSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

클라이언트 -> 소켓을 쓰고 서버는 읽을준비를함
서버는 보낼데이터를 쓰고 클라이언트는 읽을준비를함


서버는 업셋하고있다가 클라이언트가 접속하면 소켓을 만들어서 컬렉션프레임워크에 넣고
작업스레드를 만들어서 클라이언트랑 접속하게 냅둠
